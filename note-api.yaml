# TODO: upgrade to OAS 3.1 once supported by more tools
openapi: '3.0.3'
info:
  title: Note API
  version: '0.0.11'
  description: |
    The Note API is an API to store, retrieve text-based notes.
servers:
  - url: http://localhost:8080
    description: local
paths:
  /notes:
    get:
      summary: Search for notes
      parameters:
        - in: query
          name: userId
          schema:
            type: string
        - in: query
          name: title
          schema:
            type: string
        - in: query
          name: label
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/Page'
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/NotePartial'
    post:
      summary: Create note
      requestBody:
        $ref: '#/components/requestBodies/note'
      responses:
        '200':
          $ref: '#/components/responses/note'
        default:
          $ref: '#/components/responses/error'
  /notes/{noteId}:
    get:
      summary: Get note
      parameters:
        - $ref: '#/components/parameters/noteId'
      responses:
        '200':
          $ref: '#/components/responses/note'
        default:
          $ref: '#/components/responses/error'
    put:
      summary: Update note
      parameters:
        - $ref: '#/components/parameters/noteId'
      requestBody:
        $ref: '#/components/requestBodies/note'
      responses:
        '200':
          $ref: '#/components/responses/note'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete note
      parameters:
        - $ref: '#/components/parameters/noteId'
      responses:
        '204':
          description: No content
        default:
          $ref: '#/components/responses/error'
  /users:
    post:
      summary: Create user
      requestBody:
        $ref: '#/components/requestBodies/user'
      responses:
        '200':
          $ref: '#/components/responses/user'
        default:
          $ref: '#/components/responses/error'
  /users/{userId}:
    get:
      summary: Get user
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          $ref: '#/components/responses/user'
        default:
          $ref: '#/components/responses/error'
    put:
      summary: Update user
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        $ref: '#/components/requestBodies/user'
      responses:
        '200':
          $ref: '#/components/responses/user'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete user
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '204':
          description: No content
        default:
          $ref: '#/components/responses/error'
components:
  requestBodies:
    note:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Note'
    user:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
  parameters:
    noteId:
      name: noteId
      in: path
      required: true
      schema:
        type: string
        example: '621a80c50f239c6d37c6313b'
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: string
        example: '621a80c50f239c6d37c6313b'
  responses:
    error:
      description: 'Server error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    note:
      description: 'Note'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Note'
    user:
      description: 'User'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
  schemas:
    Error:
      type: object
      description: API error (RFC 7807 Problem Details)
      properties:
        type:
          description: |
            A URI reference that identifies the problem type.
          type: string
          format: uri
          example: https://example.com/probs/out-of-credit
        title:
          description: |
            A short, human-readable summary of the problem type. It SHOULD NOT
            change from occurrence to occurrence of the problem.
          type: string
          example: You do not have enough credit.
        status:
          description: |
            The HTTP status code generated by the origin server for this
            occurrence of the problem.
          type: integer
          format: int32
          example: 400
        detail:
          description: |
            A human-readable explanation specific to this occurrence of the
            problem.
          type: string
          example: Your current balance is 30, but that costs 50.
        instance:
          description: |
            A URI reference that identifies the specific occurrence of the
            problem. It may or may not yield further information if
            dereferenced.
          type: string
          example: /account/12345/msgs/abc
    Note:
      type: object
      allOf:
        - $ref: '#/components/schemas/NotePartial'
      properties:
        content:
          type: string
          format: markdown
          description: Multi-line note content in Markdown format
          example: |
            # Header
            
            * list item 1
            * list item 2
    NotePartial:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: '621a80c50f239c6d37c6313b'
        userId:
          type: string
          example: '621e25d546ca105d43d1d073'
        title:
          type: string
          example: 2022 Hawaii
        createdDate:
          type: string
          format: date-time
          readOnly: true
          example: '2022-02-14T01:02:03Z'
        updatedDate:
          type: string
          format: date-time
          readOnly: true
          example: '2022-02-14T01:02:03Z'
        labels:
          type: array
          items:
            type: string
          example:
            - favorites
            - vacations
    Page:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        pageSize:
          type: integer
          example: 20
        pageToken:
          type: string
          example: '1'
        nextPageToken:
          type: string
          example: '2'
    User:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          example: '621e25d546ca105d43d1d073'
        name:
          type: string
          example: ndrake
        joinDate:
          type: string
          format: date-time
          example: '2022-02-14T01:02:03Z'
        noteLabels:
          type: array
          items:
            type: string
          example: [favorites,vacations]
